# -*- coding: utf-8 -*-
"""Task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b39kER5xcL7JV53ZUYF-iy18hn0thCtb
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all the libraries needed in this notebook
import pandas as pd
import numpy as np
import seaborn as sns
from plotnine import*
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
# %matplotlib inline

"""**Reading the dataset**"""

df=pd.read_csv("/SampleSuperstore.csv")
df.head()

df.tail()

df.shape

df.info()

df.describe()

df.isnull().sum()

"""**Checking for duplicate. If yes, we will drop those duplicates**"""

df.drop_duplicates()

df.nunique()

"""**Dropping uneccesary columns **"""

df.columns

#Deleting the column
col =['Postal Code']
sample1= df.drop(columns=col,axis=1)

#Correlation between variables
sample1.corr()

#Covariance of columns
sample1.cov()

#Loads first five rows
sample1.head()

#Loads last five rows
sample1.tail()

"""**Data Visualization**"""

plt.figure(figsize=(16,8),)
plt.bar('Sub-Category','Category',data=sample1, color = 'green')
plt.title('Category vs Sub-Category')
plt.xlabel('Category')
plt.ylabel('Sub-Category')
plt.xticks(rotation=45)
plt.show()

#Checking the correlation
sample1.corr()

sample1.hist(bins=50,figsize=(20,15))
plt.show()

#Count the total relatable states
sample1['State'].value_counts()

plt.figure(figsize=(15,15))
sns.countplot(x=sample1['State'])
plt.xticks(rotation=90)
plt.title("STATE")
plt.show()

Profit_plot = (ggplot(df,aes(x='Sub-Category',y='Profit',fill='Sub-Category')) + geom_col() + coord_flip() + scale_fill_brewer(type='div',palette="Spectral") + theme_classic() + ggtitle('Pie Chart')) 
display(Profit_plot)

"""**The above pie chart shows the profit and loss of each and every subcategories**"""

sns.set(style="whitegrid")
plt.figure(2,figsize=(20,15))
sns.barplot(x='Sub-Category',y='Profit',data=df,palette='Spectral')
plt.suptitle('Pie Consumption Patterns in the United States',fontsize=10)
plt.show()

ggplot(df,aes(x='Ship Mode',fill='Category')) + geom_bar(stat = 
                                                             'count')

"""**Analysis using Pairplot of each column**"""

sns.pairplot(df,hue='Category')

"""** Based on Region **"""

sns.pairplot(df,hue='Region')

"""** Based on the segment **"""

sns.pairplot(df,hue='Segment')

figsize=(15,10)
sns.pairplot(sample1,hue='Sub-Category')
plt.show()

flip_xlabels= theme(axis_text_x = element_text(angle =90,hjust=1),figure_size=(10,5),
                    axis_ticks_length_major=10,axis_ticks_length_minor=5)
(ggplot(df, aes(x='Sub-Category',fill='Sales')) + geom_bar(fill="blue") +  facet_wrap(['Segment'])
+ flip_xlabels + theme(axis_text_x = element_text(size=12))+ ggtitle("Sales FRom Every Segment Of United States OF Whole Data") )

"""**
From the above graph we can say that "Home-Office" has less purchased sub-categories.**
"""

flip_xlabels= theme(axis_text_x= element_text(angle =90,hjust=1),figure_size=(10,5),
                    axis_ticks_length_major=10,axis_ticks_length_minor=5)
(ggplot(df,aes(x='Sub-Category',fill='Discount')) + geom_bar(fill="violet") +  facet_wrap(['Segment'])
+ flip_xlabels + theme(axis_text_x = element_text(size=12))+ ggtitle("Discount on Categories From Every Segment Of United States of Whole Data"))

flip_xlabels= theme(axis_text_x = element_text(angle =90,hjust=10),figure_size=(10,10),
                    axis_ticks_length_major=50,axis_ticks_length_minor=50)
(ggplot(sample1,aes(x='Category',fill='Sales')) + geom_bar(fill="red") + theme(axis_text_x =element_text(size=10))
+ facet_wrap(['Region']) + flip_xlabels     + ggtitle("Sales From Every Region Of United States OF Whole Data"))

plt.figure(figsize=(10,4))
sns.lineplot('Discount','Profit', data =sample1,label = 'Discount')
plt.legend()
plt.show()

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

state_code = {'AK': 'Alaska',
    'AL': 'Alabama',
    'AR': 'Arkansas',
    'AZ': 'Arizona',
    'CA': 'California',
    'CO': 'Colorado',
    'CT': 'Connecticut',
    'DC': 'District of Columbia',
    'DE': 'Delaware',
    'FL': 'Florida',
    'GA': 'Georgia',
    'HI': 'Hawaii',
    'IA': 'Iowa',
    'ID': 'Idaho',
    'IL': 'Illinois',
    'IN': 'Indiana',
    'KS': 'Kansas',
    'KY': 'Kentucky',
    'LA': 'Louisiana',
    'MA': 'Massachusetts',
    'MD': 'Maryland',
    'ME': 'Maine',
    'MI': 'Michigan',
    'MN': 'Minnesota',
    'MO': 'Missouri',
    'MS': 'Mississippi',
    'MT': 'Montana',
    'NC': 'North Carolina',
    'ND': 'North Dakota',
    'NE': 'Nebraska',
    'NH': 'New Hampshire',
    'NJ': 'New Jersey',
    'NM': 'New Mexico',
    'NV': 'Nevada',
    'NY': 'New York',
    'OH': 'Ohio',
    'OK': 'Oklahoma',
    'OR': 'Oregon',
    'PA': 'Pennsylvania',
    'RI': 'Rhode Island',
    'SC': 'South Carolina',
    'SD': 'South Dakota',
    'TN': 'Tennessee',
    'TX': 'Texas',
    'UT': 'Utah',
    'VA': 'Virginia',
    'VT': 'Vermont',
    'WA': 'Washington',
    'WI': 'Wisconsin',
    'WV': 'West Virginia',
    'WY': 'Wyoming'} 
sample1['state_code'] = sample1.State.apply(lambda x: state_code)

state_data =sample1[['Sales','Profit','state_code']]
fig = go.Figure(data =go.Choropleth(
    locations = state_data.index,
    z =state_data.Sales,
    locationmode='USA-states',
    colorscale ='Reds',
    colorbar_title ='Sales in USD',
))

fig.update_layout(
    title_text ='Total State-Wise Sales',
        height=800,)
fig.show()

def state_data_viewer(states):
  """Plots the turnover generated by different product categories and sub-categories from the list of given states.
  Args:
       states-List of all the statesyou want to plots for
  Returns:
  None
  """
  product_data = sample1.groupby(['State'])
  for state in states:
    data =  product_data.get_group(state).groupby(['Category'])
    fig,ax =plt.subplots(1,3,figsize=(28,5))
    fig.suptitle(state,fontsize =14)
    ax_index = 0
    for cat in ['Furniture','Office Supplies','Technology']:
      cat_data = data.get_group(cat).groupby(['Sub-Category']).sum()
      sns.barplot(x = cat_data.Profit, y =cat_data.index,ax = ax[ax_index])
      ax[ax_index].set_ylabel(cat)
      ax_index  +=1
    fig.show()

"""** From the above data visualization,we can see the states where sales and profits are both high and less**"""

states = ['California','Washington','Mississippi','Arizona','Texas']
state_data_viewer(states)


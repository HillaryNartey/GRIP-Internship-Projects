# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfGTgOYs4ZfzjoFOlH7I4BRSYwf_pGpj
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
# %matplotlib inline

#reading the data from the link 
url = "http://bit.ly/w-data"
stu_data = pd.read_csv(url)
print("Data has been imported succesful")

stu_data.head(10)

#Check if there is any null value in the Dataset
stu_data.isnull == True

"""Since there is no null value in the Dataset, we can now visualize our Data."""

sns.set_style('darkgrid')
sns.scatterplot(y= stu_data['Scores'], x= stu_data['Hours'])
plt.title('Hours Vs Percentage',size=20)
plt.xlabel('Hours Studied', size=12)
plt.ylabel('Percntage Score', size=12)
plt.show()

sns.regplot(x= stu_data['Hours'], y= stu_data['Scores'])
plt.title('Regression Plot',size=20)
plt.xlabel('Hours Studied', size=12)
plt.ylabel(' Percentage Scored', size=12)
plt.show()
print(stu_data.corr())

"""The variables are positively correlated 

**Training the model**

1. Preparing the Data


"""

x = stu_data.iloc[:, :-1].values
y = stu_data.iloc[:, 1].values

#iloc helps us to select a specific row/column from the dataset
# Spliting the Data in two
train_x, val_x, train_y, val_y = train_test_split(x, y, random_state = 0)

"""2. Fitting the Data into the model"""

regression = LinearRegression()
regression.fit(train_x, train_y)
print("---------Model Trained---------")

""" **Making Predictions**"""

print(train_x) # Testing data - In Hours
y_pred = regression.predict(train_x) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': train_y, 'Predicted': y_pred})  
df

"""**Evaluating the Model**"""

# Calculating the accuracy of the model
print('Mean absolute error: ',mean_absolute_error(val_y,pred_y))

"""**What will be the predicted score of a student if he/she studies for 9.25 hrs/ day?**"""

hours = [9.25]
answer = regression.predict([hours])
print("Score = {}".format(round(answer[0],3)))

"""**According to the regression model if a student studies for 9.25 hours a day he/she is likely to score 93.89 marks.**"""

